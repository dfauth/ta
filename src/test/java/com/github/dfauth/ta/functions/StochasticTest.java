package com.github.dfauth.ta.functions;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.dfauth.ta.functional.FastStochastic;
import com.github.dfauth.ta.functional.StochasticReducer;
import com.github.dfauth.ta.model.Price;
import lombok.extern.slf4j.Slf4j;
import org.junit.Test;

import java.util.List;

import static com.github.dfauth.util.ZipUtils.unzip;

@Slf4j
public class StochasticTest {

    private ObjectMapper mapper = new ObjectMapper();

    @Test
    public void testIt() throws JsonProcessingException {
        FastStochastic stochastic = PRICES.stream().collect(new StochasticReducer(3, 14));
        log.info(" %K: {}",mapper.writeValueAsString(stochastic));
    }

    private static final List<Price> PRICES = unzip("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");
}
